@ARTICLE{initial,title={Automatic Uniform Quantum State Preparation Using Decision Diagrams},year={2020},author={Fereshte Mozafari and Mathias Soeken and Heinz Riener and Heinz Riener and Giovanni De Micheli},doi={10.1109/ismvl49045.2020.00-10},pmid={null},pmcid={null},mag_id={3119415292},journal={2020 IEEE 50th International Symposium on Multiple-Valued Logic (ISMVL)}}
@ARTICLE{example,title={From Boolean functions to quantum circuits: A scalable quantum compilation flow in C++},year={2021},author={Bruno Schmitt and Fereshte Mozafari and Giulia Meuli and Heinz Riener and Giovanni De Micheli},doi={10.23919/date51398.2021.9474237},pmid={null},pmcid={null},mag_id={3184664169},journal={2021 Design, Automation  Test in Europe Conference  Exhibition (DATE)}}
% @ARTICLE{Tweedledum,title={Tweedledum: A Compiler Companion for Quantum Computing},year={2022},author={Bruno Schmitt and Giovanni De Micheli},doi={10.23919/date54114.2022.9774510},pmid={null},pmcid={null},mag_id={4280636891},journal={2022 Design, Automation  Test in Europe Conference  Exhibition (DATE)}}
@ARTICLE{EPFL,title={The EPFL Logic Synthesis Libraries.},year={2022},author={Mathias Soeken and Heinz Riener and Winston Haaswijk and Giovanni De Micheli},doi={null},pmid={null},pmcid={null},mag_id={2800719180},journal={arXiv: Logic in Computer Science},url={https://arxiv.org/abs/1805.05121}}
@ARTICLE{multiplicative,title={The Role of Multiplicative Complexity in Compiling Low T-count Oracle Circuits},year={2019},author={Giulia Meuli and Mathias Soeken and Earl T. Campbell and Martin Roetteler and Giovanni De Micheli},doi={10.1109/iccad45719.2019.8942093},pmid={null},pmcid={null},mag_id={2964777125}}
@ARTICLE{Meuli_2019,title={Reversible Pebbling Game for Quantum Memory Management},year={2019},author={Giulia Meuli and Mathias Soeken and Martin Roetteler and Nikolaj Bj√∏rner and Nikolaj Bjorner and Giovanni De Micheli},doi={10.23919/date.2019.8715092},pmid={null},pmcid={null},mag_id={2926868949},journal={arXiv: Quantum Physics},abstract={Quantum memory management is becoming a pressing problem, especially given the recent research effort to develop new and more complex quantum algorithms. The only existing automatic method for quantum states clean-up relies on the availability of many extra resources. In this work, we propose an automatic tool for quantum memory management. We show how this problem exactly matches the reversible pebbling game. Based on that, we develop a SAT-based algorithm that returns a valid clean-up strategy, taking the limitations of the quantum hardware into account. The developed tool empowers the designer with the flexibility required to explore the trade-off between memory resources and number of operations. We present three show-cases to prove the validity of our approach. First, we apply the algorithm to straight-line programs, widely used in cryptographic applications. Second, we perform a comparison with the existing approach, showing an average improvement of 52.77%. Finally, we show the advantage of using the tool when synthesizing a quantum circuit on a constrained near-term quantum device.}}
